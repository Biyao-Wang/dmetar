measures.reshape$comparison = factor(measures.reshape$comparison, levels = levels)
# Plot
PlotDirectEvidence = ggplot2::ggplot(measures.reshape, aes(x = forcats::fct_rev(comparison), fill = factor(variable,
levels = c("indirect", "direct")), y = value)) + geom_bar(stat = "identity", position = "fill") +
coord_flip() + theme_minimal() + theme(legend.position = "left") + scale_y_continuous(labels = scales::percent) +
ylab("Percentage") + xlab("Network Estimate") + guides(fill = guide_legend(title = "Evidence")) +
scale_fill_manual(values = c("lightblue", "orange")) + geom_hline(aes(yintercept = 0.25), color = "white") +
geom_hline(aes(yintercept = 0.5), color = "white") + geom_hline(aes(yintercept = 0.75), color = "white")
# PLOT 2: Mean Path Length ####
# Get Measures
mpath = netmeasures(x, random = random)$meanpath
path.df = data.frame(comparison = names(mpath), mpath = mpath)
rownames(path.df) = c()
path.df$comparison = factor(path.df$comparison, levels = levels)
# Plot for summary plot
PlotMeanPathLength_s = ggplot2::ggplot(path.df, aes(x = forcats::fct_rev(comparison), y = mpath)) + geom_bar(stat = "identity",
fill = "lightgray") + coord_flip() + geom_hline(aes(yintercept = 2), color = "blue") + geom_text(aes(x = comparison,
y = 0.4, label = comparison), color = "gray23", size = cts) + geom_text(aes(x = comparison, y = mpath +
0.1, label = round(mpath, 1)), size = nts) + ylab("Mean Path Length") + theme(axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.ticks.x = element_blank(), panel.background = element_blank()) +
scale_x_discrete(position = "top")
# PLOT 3: Parallelism ####
# Get Measures
mpar = netmeasures(x, random = random)$minpar
mpar.df = data.frame(comparison = names(mpar), mpar = mpar)
rownames(mpar.df) = c()
mpar.df$comparison = factor(mpar.df$comparison, levels = levels)
# Plot for summary plot
PlotMinimalParallelism_s = ggplot2::ggplot(mpar.df, aes(x = forcats::fct_rev(comparison), y = mpar)) +
geom_bar(stat = "identity", fill = "lightgray") + coord_flip() + geom_text(aes(x = comparison, y = mpar +
0.1, label = round(mpar, 1)), size = nts) + geom_text(aes(x = comparison, y = 0.4, label = comparison),
color = "gray23", size = cts) + ylab("Minimal Parallelism") + theme(axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), panel.background = element_blank())
# Process for return ####
# Save data used for plotting in df
data = data.frame(proportion.direct = measures$direct, proportion.indirect = measures$indirect, meanpath = mpath,
minpar = mpar)
# Set title
if (random == FALSE) {
plot_title = "Direct evidence proportion for each network estimate (fixed-effect model)"
} else {
plot_title = "Direct evidence proportion for each network estimate (random-effects model)"
}
grid = gridExtra::arrangeGrob(PlotDirectEvidence, PlotMinimalParallelism_s, PlotMeanPathLength_s, ncol = 3, widths = spr,
heights = c(4), top = plot_title)
returnlist = list(data = data, plot = grid)
class(returnlist) = "direct.evidence.plot"
invisible(returnlist)
returnlist
}
direct.evidence.plot = function(x, random = FALSE, comparison.label.size = 2, numeric.label.size = 3, subplot.ratio = c(5,
1.3, 1.3)) {
# Validate
x = x
random = random
cts = comparison.label.size
nts = numeric.label.size
spr = subplot.ratio
if (class(x) != "netmeta") {
stop("Input to this function has to be an object of class 'netmeta' created by the 'netmeta::netmeta' function.")
}
# PLOT 1: Direct and Indirect Evidence ####
# Get Measures
measures = netmeasures(x, random = random)$proportion
indirect = 1 - measures
measures = data.frame(comparison = names(measures), direct = measures, indirect = indirect)
rownames(measures) = c()
measures$direct = round(measures$direct, 4)
measures$indirect = round(measures$indirect, 4)
measures.reshape = melt(measures, id.vars = "comparison", measure.vars = c("direct", "indirect"))
names = measures.reshape[measures.reshape$variable == "direct", ]$comparison
direct = measures.reshape[measures.reshape$variable == "direct", ]$value
names = names[order(match(names, direct))]
# Reorder Label
measures = measures %>% mutate(comparison = forcats::fct_reorder(comparison, -direct))
levels = measures$comparison %>% levels
measures.reshape$comparison = factor(measures.reshape$comparison, levels = levels)
# Plot
PlotDirectEvidence = ggplot2::ggplot(measures.reshape, aes(x = forcats::fct_rev(comparison), fill = factor(variable,
levels = c("indirect", "direct")), y = value)) + geom_bar(stat = "identity", position = "fill") +
coord_flip() + theme_minimal() + theme(legend.position = "left") + scale_y_continuous(labels = scales::percent) +
ylab("Percentage") + xlab("Network Estimate") + guides(fill = guide_legend(title = "Evidence")) +
scale_fill_manual(values = c("lightblue", "orange")) + geom_hline(aes(yintercept = 0.25), color = "white") +
geom_hline(aes(yintercept = 0.5), color = "white") + geom_hline(aes(yintercept = 0.75), color = "white")
# PLOT 2: Mean Path Length ####
# Get Measures
mpath = netmeasures(x, random = random)$meanpath
path.df = data.frame(comparison = names(mpath), mpath = mpath)
rownames(path.df) = c()
path.df$comparison = factor(path.df$comparison, levels = levels)
# Plot for summary plot
PlotMeanPathLength_s = ggplot2::ggplot(path.df, aes(x = forcats::fct_rev(comparison), y = mpath)) + geom_bar(stat = "identity",
fill = "lightgray") + coord_flip() + geom_hline(aes(yintercept = 2), color = "blue") + geom_text(aes(x = comparison,
y = 0.4, label = comparison), color = "gray23", size = cts) + geom_text(aes(x = comparison, y = mpath +
0.1, label = round(mpath, 1)), size = nts) + ylab("Mean Path Length") + theme(axis.title.y = element_blank(),
axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.ticks.x = element_blank(), panel.background = element_blank()) +
scale_x_discrete(position = "top")
# PLOT 3: Parallelism ####
# Get Measures
mpar = netmeasures(x, random = random)$minpar
mpar.df = data.frame(comparison = names(mpar), mpar = mpar)
rownames(mpar.df) = c()
mpar.df$comparison = factor(mpar.df$comparison, levels = levels)
# Plot for summary plot
PlotMinimalParallelism_s = ggplot2::ggplot(mpar.df, aes(x = forcats::fct_rev(comparison), y = mpar)) +
geom_bar(stat = "identity", fill = "lightgray") + coord_flip() + geom_text(aes(x = comparison, y = mpar +
0.1, label = round(mpar, 1)), size = nts) + geom_text(aes(x = comparison, y = 0.4, label = comparison),
color = "gray23", size = cts) + ylab("Minimal Parallelism") + theme(axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), panel.background = element_blank())
# Process for return ####
# Save data used for plotting in df
data = data.frame(proportion.direct = measures$direct, proportion.indirect = measures$indirect, meanpath = mpath,
minpar = mpar)
# Set title
if (random == FALSE) {
plot_title = "Direct evidence proportion for each network estimate (fixed-effect model)"
} else {
plot_title = "Direct evidence proportion for each network estimate (random-effects model)"
}
grid = arrangeGrob(PlotDirectEvidence, PlotMinimalParallelism_s, PlotMeanPathLength_s, ncol = 3, widths = spr,
heights = c(4), top = plot_title)
returnlist = list(data = data, plot = grid)
class(returnlist) = "direct.evidence.plot"
invisible(returnlist)
returnlist
}
direct.evidence.plot(nma, random=FALSE, comparison.label.size = 1,
numeric.label.size=1, subplot.ratio=c(3,1,1))
plot(dep)
direct.evidence.plot(nma, random=FALSE, comparison.label.size = 1,
numeric.label.size=1, subplot.ratio=c(3,1,1))
dep = direct.evidence.plot(nma, random=FALSE, comparison.label.size = 1,
numeric.label.size=1, subplot.ratio=c(3,1,1))
summary(dep)
summary.direct.evidence.plot = print.direct.evidence.plot = function(x){
cat("Direct Evidence Proportion for each Network Estimate", "\n",
"-------------------------------------------------", "\n")
colnames(x$data)[1:2] = c("Direct", "Indirect")
print(x$data[order(x$data$Indirect),])
grid::grid.newpage()
grid.draw(x$plot, ...)
}
plot.direct.evidence.plot = function(x, ...){
grid::grid.newpage()
grid.draw(x$plot, ...)
}
dep = direct.evidence.plot(nma, random=FALSE, comparison.label.size = 1,
numeric.label.size=1, subplot.ratio=c(3,1,1))
dep
summary.direct.evidence.plot = print.direct.evidence.plot = function(x){
cat("Direct Evidence Proportion for each Network Estimate", "\n",
"-------------------------------------------------", "\n")
colnames(x$data)[1:2] = c("Direct", "Indirect")
print(x$data[order(x$data$Indirect),])
grid::grid.newpage()
grid.draw(x$plot)
}
dep = direct.evidence.plot(nma, random=FALSE, comparison.label.size = 1,
numeric.label.size=1, subplot.ratio=c(3,1,1))
dep
plot(dep)
dep
m2 <- rma(yi = TE, sei = seTE, data = ThirdWave,
#'           slab = ThirdWave$Author, method = "PM")
m2 <- rma(yi = TE, sei = seTE, data = ThirdWave,
slab = ThirdWave$Author, method = "PM")
fo2 <- find.outliers(m2)
forest(fo2)
?metafor::forest
?metafor::forest.rma
forest(fo2, col = "blue")
forest(fo2, col = "green")
forest(fo2, cex = .8, addcred = T)
plot.find.outliers = forest.find.outliers = function(x, ...){
# meta
if (!(class(x)[2] %in% c("mf", "mf.null"))){
if (class(x)[2] == "ftrf" | class(x)[2] == "null.ftrf"){meta::forest.meta(x$m.fixed, ...)}
if (class(x)[2] == "ffrt" | class(x)[2] == "null.ffrt"){meta::forest.meta(x$m.random, ...)}
if (class(x)[2] == "ftrt" | class(x)[2] == "null.ftrt"){meta::forest.meta(x$m.fixed, ...)
meta::forest.meta(x$m.random, ...)}
} else {
# metafor
metafor::forest.rma(x$m, addcred = T, showweights = T, ...)
}
}
forest(fo2, cex = .8, addcred = T)
forest(fo2, cex = .8)
forest(fo2, cex = .8, col = "blue")
forest(fo2, cex = .8, col = "lightblue")
forest(fo1, prediction = T)
?InfluenceAnalysis
data('MVRegressionData')
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
plot(mmi)
meta1 = metagen(TE,seTE, studlab=ThirdWave$Author, data=ThirdWave)
pcurve(meta1)
pc = pcurve(meta1)
power.analysis(d=0.124, k=10, n1=50, n2=50, heterogeneity = 'fixed')
pa = power.analysis(OR=0.77, k=12, n1=50, n2=50, heterogeneity = 'high')
summary(pa)
plot(pa)
power.analysis.subgroup(TE1=0.30, TE2=0.66, seTE1=0.13, seTE2=0.14)
pasg = power.analysis.subgroup(TE1=-0.91, TE2=-1.22, var1 = 0.0023, var2 = 0.0078,
two.tailed = FALSE)
pasg
plot(pasg)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data("ThirdWave")
data("MVRegressionData")
data("NetDataNetmeta")
power.analysis(d = .18, k = 18, n1 = 50, n2 = 50, heterogeneity = "moderate")
power.analysis(d = .18, k = 18, n1 = 50, n2 = 50, heterogeneity = "moderate")
NNT(ThirdWave$TE[1], CER = 0.2)
ThirdWave$TE[1]
knitr::opts_chunk$set(echo = TRUE)
NNT(0.71, CER = 0.2)
NNT(0.71, CER = 0.2)
pool.groups(n1 = 50, n2 = 65, m1 = 12.3, m2 = 14.8, sd1 = 2.45, sd2 = 2.89)
se.from.p(effect.size = 0.38, p = 0.0456, N = 83)
data = data.frame(
"study" = c("Higgins et al., 2011", "Borenstein et al., 2008", "Holm, 1971",
"Zajonc et al., 2005", "Cuijpers, 2014"),
"Allocation_concealment" = c("Low", "High", "High", "Unclear", "High"),
"Randomization" = c("Low", "High", "Unclear", "Low", "High"),
"Sequence_generation" = c("Low", "High", "Unclear", "Unclear", "High"),
"ITT.Analyses" = c("Low", "High", "Unclear", "Unclear", "Unclear"),
"Selective_outcome_reporting" = c("Low", "High", "High", "High", "Unclear")
)
studies = data$study
data = data[,2:5]
rob.summary(data, studies = studies, table = TRUE)
knitr::include_graphics("fig/rob_table.png")
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
comb.fixed = FALSE,
method.tau = "PM")
subgroup.analysis.mixed.effects(x = meta, subgroups = ThirdWave$TypeControlGroup)
sgame = subgroup.analysis.mixed.effects(x = meta, subgroups = ThirdWave$TypeControlGroup)
summary(sgame)
forest(sgame)
sgame = subgroup.analysis.mixed.effects(x = meta, subgroups = ThirdWave$TypeControlGroup)
summary(sgame)
forest(sgame, col.diamond = "blue")
subgroup.analysis.mixed.effects(x = meta, subgroups = ThirdWave$TypeControlGroup)
coefTable.rma = function(model, ...) {
makeCoefTable = function (x, se, df = NA_real_, coefNames = names(x))
{
# Unexported function from the MuMIn package, see MuMIn:::.makeCoefTable
if (n <- length(x)) {
xdefined <- !is.na(x)
ndef <- sum(xdefined)
if (ndef < n) {
if (length(se) == ndef) {
y <- rep(NA_real_, n)
y[xdefined] <- se
se <- y
}
if (length(df) == ndef) {
y <- rep(NA_real_, n)
y[xdefined] <- df
df <- y
}
}
}
if (n && n != length(se))
stop("length(x) is not equal to length(se)")
ret <- matrix(NA_real_, ncol = 3L, nrow = length(x), dimnames = list(coefNames,
c("Estimate", "Std. Error", "df")))
if (n)
ret[, ] <- cbind(x, se, rep(if (is.null(df)) NA_real_ else df,
length.out = n), deparse.level = 0L)
class(ret) <- c("coefTable", "matrix")
ret
}
makeCoefTable(model$b, model$se, coefNames = rownames(model$b))
}
makeArgs.rma = function(obj, termNames, comb, opt, ...) {
ret <- makeArgs.default(obj, termNames, comb, opt)
names(ret)[1L] <- "mods"
ret
}
library(knitr)
hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
lines <- options$output.lines
if (is.null(lines)) {
return(hook_output(x, options))  # pass to default hook
}
x <- unlist(strsplit(x, "\n"))
more <- "..."
if (length(lines)==1) {        # first n lines
if (length(x) > lines) {
# truncate the output, but add ....
x <- c(head(x, lines), more)
}
} else {
x <- c(more, x[lines], more)
}
# paste these lines together
x <- paste(c(x, ""), collapse = "\n")
hook_output(x, options)
})
multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
method.tau = "SJ",
comb.fixed = FALSE)
find.outliers(meta)
forest(find.outliers(meta))
forest(find.outliers(meta), col.study = "blue")
InfluenceAnalysis(meta)
infan = InfluenceAnalysis(meta)
plot(infan)
data("m.gosh")
gosh.diagnostics(m.gosh)
pcurve(meta)
find.outliers(meta)
forest(find.outliers(meta), col.weight = "blue")
nmeta = netmeta(TE, seTE, treat1, treat2,
data=NetDataNetmeta,
studlab = NetDataNetmeta$studlab)
direct.evidence.plot(nmeta)
devtools::build()
devtools::build()
devtools::build_manual()
vignette("dmetar")
vignette("dmetar-vignette")
devtools::document()
devtools::build_manual()
devtools::build_manual()
?predict.lm
predict.lm
?print.meta
devtools::document()
?print.dmetar
?plot.find.outliers
devtools::document()
?print.dmetar
vignette("dmetar")
pkgdown::build_site()
pkgdown::build_site()
warnings()
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
method.tau = "SJ",
comb.fixed = FALSE)
find.outliers(meta)
forest(find.outliers(meta), col.study = "blue")
pkgdown::build_site()
pkgdown::build_favicon()
pkgdown::build_favicons()
pkgdown::build_site()
devtools::install()
devtools::check()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
pkgdown::build_site()
devtools::install()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::build_site()
devtools::build_site()
devtools::build()
devtools::build_site()
build_site()
devtools::build_site()
devtools::document()
devtools::build_site()
devtools::document()
?summary.direct.evidence.plot
devtools::document()
devtools::document()
devtools::build_site()
devtools::document()
devtools::build_site()
devtools::document()
devtools::build_site()
devtools::build_manual()
?find.outliers
library(dmetar)
?find.outliers
m2 <- rma(yi = TE, sei = seTE, data = ThirdWave,
slab = ThirdWave$Author, method = "PM")
library(metafor)
m2 <- rma(yi = TE, sei = seTE, data = ThirdWave,
slab = ThirdWave$Author, method = "PM")
fo2 <- find.outliers(m2)
fo2 %>% forest()
library(dplyr)
fo2 %>% forest()
forest(fo2)
library(devtools)
devtools::install()
library(dmetar)
?find.outliers
library(metafor)
library(dplyr)
m2 <- rma(yi = TE, sei = seTE, data = ThirdWave,
slab = ThirdWave$Author, method = "PM")
fo2 <- find.outliers(m2)
forest(fo2)
data("m.gosh")
gosh.diagnostics(m.gosh)
?rob.summary
fo2 <- find.outliers(m2)
data = data.frame(
"study" = c("Higgins et al., 2011", "Borenstein et al., 2008", "Holm, 1971",
"Zajonc et al., 2005", "Cuijpers, 2014"),
"Allocation_concealment" = c("Low", "High", "High", "Unclear", "High"),
"Randomization" = c("Low", "High", "Unclear", "Low", "High"),
"Sequence_generation" = c("Low", "High", "Unclear", "Unclear", "High"),
"ITT.Analyses" = c("Low", "High", "Unclear", "Unclear", "Unclear"),
"Selective_outcome_reporting" = c("Low", "High", "High", "High", "Unclear")
)
rob.summary(data)
rob.summary(data, table = T)
data2 = data.frame(
"study" = c("Higgins et al., 2011", "Borenstein et al., 2008", "Holm, 1971",
"Zajonc et al., 2005", "Cuijpers, 2014"),
"Allocation_concealment" = c("low", "high", "high", "uc", "high"),
"Randomization" = c("low", "high", "miss", "low", "high"),
"Sequence_generation" = c("low", "high", "uc", "uc", "high"),
"ITT.Analyses" = c("low", "high", "uc", "uc", "uc"),
"Selective_outcome_reporting" = c("low", "high", "high", "high", "uc")
)
rob.summary(data2, name.high = "high", name.unclear = "uc", name.low = "low",
name.missing = "miss", studies = data2$study, table = TRUE)
rob.summary(data, table = F)
?InfluenceAnalysis
meta = metagen(TE, seTE, studlab = paste(ThirdWave$Author), data=ThirdWave)
library(meta)
meta = metagen(TE, seTE, studlab = paste(ThirdWave$Author), data=ThirdWave)
inf.an = InfluenceAnalysis(meta, return.separate.plots = TRUE)
inf.an
plot(inf.an, "baujat")
plot(inf.an, "ES")
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
usethis::use_lifecycle_badge("maturing")
pkgdown::build_home()
library(metafor)
pkgdown::build_reference()
pkgdown::build_site()
devtools::document()
rgba(255, 255, 51, 0.5)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build()
devtools::check()
meta::forest()
?meta::forest()
?meta::forest.meta
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
dmetar::forest.find.outliers()
?forest.default
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
pkgdown::build_site()
devtools::check()
