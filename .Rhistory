ssEnv <- new.env(parent = parent.frame())
ssFunc <- setdiff(all.vars(subsetExpr, functions = TRUE),
ssVars)
if ("dc" %in% ssFunc)
assign("dc", .subset_dc, ssEnv)
hasSubset <- if (any(ssVars == "cVar"))
4L
else 3L
}
}
comb.sfx <- rep(TRUE, nFixed)
comb.seq <- if (nov != 0L)
seq_len(nov)
else 0L
k <- 0L
extraResult1 <- integer(0L)
calls <- vector(mode = "list", length = resultChunkSize)
ord <- integer(resultChunkSize)
argsOptions <- list(response = attr(allTerms0, "response"),
intercept = nIntercepts, interceptLabel = interceptLabel,
random = attr(allTerms0, "random"), gmCall = gmCall,
gmEnv = gmEnv, allTerms = allTerms0, gmCoefNames = gmCoefNames,
gmDataHead = if (!is.null(gmCall$data)) {
if (eval(call("is.data.frame", gmCall$data), gmEnv)) eval(call("head",
gmCall$data, 1L), gmEnv) else gmCall$data
} else NULL, gmFormulaEnv = gmFormulaEnv)
matchCoefCall <- as.call(c(alist(matchCoef, fit1, all.terms = allTerms,
beta = betaMode, allCoef = TRUE), ct.args))
retColIdx <- if (nVarying)
-nVars - seq_len(nVarying)
else TRUE
if (trace > 1L) {
progressBar <- if (.Platform$GUI == "Rgui") {
utils::winProgressBar(max = ncomb, title = "'dredge' in progress")
}
else utils::txtProgressBar(max = ncomb, style = 3L)
setProgressBar <- switch(class(progressBar), txtProgressBar = utils::setTxtProgressBar,
winProgressBar = utils::setWinProgressBar, function(...) {
})
on.exit(close(progressBar))
}
iComb <- -1L
while ((iComb <- iComb + 1L) < ncomb) {
varComb <- iComb%%nVariants
jComb <- (iComb - varComb)%/%nVariants
if (varComb == 0L) {
isok <- TRUE
comb <- c(as.logical(intToBits(jComb)[comb.seq]),
comb.sfx)
nvar <- sum(comb) - nIntercepts
if (nvar > m.max || nvar < m.min || !formula_margin_check(comb,
deps) || switch(hasSubset, FALSE, !all(subset[comb,
comb], na.rm = TRUE), !evalExprInEnv(subsetExpr,
env = ssEnv, enclos = parent.frame(), comb = comb,
`*nvar*` = nvar), FALSE)) {
isok <- FALSE
next
}
newArgs <- dmetar::makeArgs.rma(global.model, allTerms[comb],
argsOptions)
if (!is.null(attr(newArgs, "problems"))) {
print.warnings(structure(vector(mode = "list",
length = length(attr(newArgs, "problems"))),
names = attr(newArgs, "problems")))
}
cl <- gmCall
cl[names(newArgs)] <- newArgs
}
if (!isok)
next
clVariant <- cl
if (nVarying) {
cvi <- variants[varComb + 1L, ]
if (hasSubset == 4L && !evalExprInEnv(subsetExpr,
env = ssEnv, enclos = parent.frame(), comb = comb,
`*nvar*` = nvar, cVar = variantsFlat[cvi]))
next
clVariant[varyingNames] <- fvarying[cvi]
}
if (trace == 1L) {
cat(iComb, ": ")
print(clVariant)
utils::flush.console()
}
else if (trace == 2L) {
setProgressBar(progressBar, value = iComb, title = sprintf("dredge: %d of %.0f subsets (%d total)",
k, (k/iComb) * ncomb, iComb))
}
if (evaluate) {
fit1 <- tryCatch(eval(clVariant, gmEnv), error = function(err) {
err$message <- paste(conditionMessage(err), "(model",
iComb, "skipped)", collapse = "")
class(err) <- c("simpleError", "warning", "condition")
warning(err)
return(NULL)
})
if (is.null(fit1))
next
if (nExtra != 0L) {
extraResult1 <- applyExtras(fit1)
if (length(extraResult1) < nExtra) {
tmp <- rep(NA_real_, nExtra)
tmp[match(names(extraResult1), names(extraResult))] <- extraResult1
extraResult1 <- tmp
}
}
mcoef1 <- eval(matchCoefCall)
ll1 <- logLik(fit1)
nobs1 <- nobs(fit1)
if (nobs1 != gmNobs)
cry(, "number of observations in model #%d [%d] different from that in global model [%d]",
iComb, nobs1, gmNobs, warn = TRUE)
row1 <- c(mcoef1[allTerms], extraResult1, df = attr(ll1,
"df"), ll = ll1, ic = IC(fit1))
k <- k + 1L
rvlen <- nrow(rval)
if (retNeedsExtending <- k > rvlen) {
nadd <- min(resultChunkSize, ncomb - rvlen)
rval <- rbind(rval, matrix(NA_real_, ncol = rvNcol,
nrow = nadd), deparse.level = 0L)
addi <- seq.int(rvlen + 1L, length.out = nadd)
coefTables[addi] <- vector("list", nadd)
}
rval[k, retColIdx] <- row1
coefTables[[k]] <- attr(mcoef1, "coefTable")
}
else {
k <- k + 1L
rvlen <- length(ord)
if (retNeedsExtending <- k > rvlen) {
nadd <- min(resultChunkSize, ncomb - rvlen)
addi <- seq.int(rvlen + 1L, length.out = nadd)
}
}
if (retNeedsExtending) {
calls[addi] <- vector("list", nadd)
ord[addi] <- integer(nadd)
}
ord[k] <- iComb
calls[[k]] <- clVariant
}
if (k == 0L)
stop("result is empty")
ord <- ord + 1L
names(calls) <- ord
if (!evaluate)
return(calls[seq_len(k)])
if (k < nrow(rval)) {
i <- seq_len(k)
rval <- rval[i, , drop = FALSE]
ord <- ord[i]
calls <- calls[i]
coefTables <- coefTables[i]
}
if (nVarying) {
varlev <- ord%%nVariants
varlev[varlev == 0L] <- nVariants
rval[, nVars + seq_len(nVarying)] <- variants[varlev,
]
}
rval <- as.data.frame(rval)
row.names(rval) <- ord
tfac <- which(!(allTerms %in% gmCoefNames))
rval[tfac] <- lapply(rval[tfac], factor, levels = NaN, labels = "+")
rval[, seq_along(allTerms)] <- rval[, v <- order(termsOrder)]
allTerms <- allTerms[v]
colnames(rval) <- c(allTerms, varyingNames, extraNames, "df",
lik$name, ICName)
if (nVarying) {
variant.names <- vapply(variantsFlat, asChar, "", width.cutoff = 20L)
vnum <- split(seq_len(sum(vlen)), rep(seq_len(nVarying),
vlen))
names(vnum) <- varyingNames
for (i in varyingNames) rval[, i] <- factor(rval[, i],
levels = vnum[[i]], labels = variant.names[vnum[[i]]])
}
rval <- rval[o <- order(rval[, ICName], decreasing = FALSE),
]
coefTables <- coefTables[o]
rval$delta <- rval[, ICName] - min(rval[, ICName])
rval$weight <- Weights(rval$delta)
mode(rval$df) <- "integer"
structure(rval, model.calls = calls[o], global = global.model,
global.call = gmCall, terms = structure(allTerms, interceptLabel = interceptLabel),
rank = IC, beta = strbeta, call = match.call(expand.dots = TRUE),
coefTables = coefTables, nobs = gmNobs, vCols = varyingNames,
column.types = {
colTypes <- c(terms = length(allTerms), varying = length(varyingNames),
extra = length(extraNames), df = 1L, loglik = 1L,
ic = 1L, delta = 1L, weight = 1L)
column.types <- rep(1L:length(colTypes), colTypes)
names(column.types) <- colnames(rval)
lv <- 1L:length(colTypes)
factor(column.types, levels = lv, labels = names(colTypes)[lv])
}, class = c("model.selection", "data.frame"))
}
utils::getFromNamespace("dredge", "MuMIn")
dredge = utils::getFromNamespace("dredge", "MuMIn")
devtools::document()
utils::getFromNamespace("dredge", "MuMIn")
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
summary(mmi)
mmi
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
dmetar::multimodel.inference
utils::getFromNamespace("dredge", "MuMIn")
devtools::document()
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
MuMIn:::.expr_beta_arg
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
MuMIn:::asChar()
MuMIn:::asChar
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
MuMIn:::.getLik
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
MuMIn:::isGEE
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
MuMIn:::.getRank()
MuMIn:::.getRank
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
MuMIn:::.checkNaAction
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
MuMIn:::fixCoefNames
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
utils::getFromNamespace("asChar", "MuMIn")
utils::getFromNamespace(".getLik", "MuMIn")
utils::getFromNamespace("isGEE", "MuMIn")
.checkNaAction <- utils::getFromNamespace(".checkNaAction", "MuMIn")
utils::getFromNamespace(".checkNaAction", "MuMIn")
utils::getFromNamespace(".isREMLFit", "MuMIn")
?getFromNamespace
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
library(dmetar)
'reputation', 'continent'))
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
MuMIn:::cry
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
summary(mmi)
makeArgs.rma = function(obj, termNames, comb, opt, ...) {
return <- makeArgs.default(obj, termNames, comb, opt)
names(return)[1L] = "mods"
return
}
coefTable.rma = function(model, ...) {
makeCoefTable(model$b, model$se, coefNames = rownames(model$b))
}
summary(mmi)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
coefTable.rma = function(model, ...) {
dmetar:::makeCoefTable(model$b, model$se, coefNames = rownames(model$b))
}
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
makeArgs.rma = function(obj, termNames, comb, opt, ...) {
return <- dmetar:::makeArgs.default(obj, termNames, comb, opt)
names(return)[1L] = "mods"
return
}
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
coefTable.rma = function(model, ...) {
dmetar:::makeCoefTable(model$b, model$se, coefNames = rownames(model$b))
}
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
utils::getFromNamespace("coefTable", "MuMIn")
View(coefTable.rma)
makeCoefTable
utils::getFromNamespace(".makeCoefTable", "MuMIn")
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
coefTable.rma = function(model, ...) {
dmetar:::makeCoefTable(model$b, model$se, coefNames = rownames(model$b))
}
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
model.avg(res, revised.var = TRUE)
MuMIn::model.avg()
MuMIn::model.avg
?UseMethod
utils::getFromNamespace(".makeCoefTable", "MuMIn")
utils::getFromNamespace("makeCoefTable", "MuMIn")
utils::getFromNamespace(".makeCoefTable", "MuMIn")
MuMIn::coefTable()
MuMIn::coefTable
?MuMIn::coefTable
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
MuMIn::coefTable()
MuMIn::coefTable
MuMIn:::coefTable.coxme()
MuMIn:::coefTable.coxme
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
devtools::document()
devtools::document()
devtools::check()
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
?nobs
?subst
MuMIn:::subst()
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
?updateDeps
MuMIn:::.DebugPrint
MuMIn:::exprapply0
MuMIn:::.subst.names.for.items
MuMIn:::evalExprInEnv
utils::getFromNamespace("evalExprInEnv", "MuMIn")
devtools::document()
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'))
mmi
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation'))
mmi
devtools::check()
devtools::document()
library(dmetar)
data('MVRegressionData')
library(metafor)
mmi = multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation'))
mmi
devtools::check()
?multimodel.inference
multimodel.inference(TE = 'yi', seTE = 'sei', data = MVRegressionData,
predictors = c('pubyear', 'quality',
'reputation', 'continent'),
method='DL', eval.criterion = 'BIC', interaction = TRUE)
data('ThirdWave')
multimodel.inference(TE = 'TE', seTE = 'seTE', data = ThirdWave,
predictors = colnames(ThirdWave)[4:7], interaction = FALSE)
data('ThirdWave')
multimodel.inference(TE = 'TE', seTE = 'seTE', data = ThirdWave,
predictors = colnames(ThirdWave)[4:7], interaction = TRUE)
pkgdown::build()
pkgdown::build_site()
citation("dmetar")
summary(mmi)
plot(mmi)
dmetar:::dredge2
