S = matrix(c(1, 0, 0,
0, "0.2*var_spatial", 0,
0, 0, "0.2*var_verbal"),
nrow=3, ncol=3)
dimnames(S)[[1]] = vars
dimnames(S)[[2]] = vars
S = as.mxMatrix(S)
tssem2(random, Amatrix = A, Smatrix = S, Fmatrix = F,
diag.constraints = TRUE)
tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = TRUE)
random2 = tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = TRUE)
summary(random2)
semp = meta2semPlot(random2)
semPaths(semp)
S1
random2 = tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = TRUE, intervals.type="LB")
summary(random2)
random2 = tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = FALSE, intervals.type="LB")
summary(random2)
# Model
random2 = tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = FALSE)
summary(random2)
random2 = tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = TRUE)
summary(random2)
mxEval(Ematrix, random2$mx.fit)
random2$mx.fit
## Display the content of the Ematrix
mxEval(Ematrix, random2$mx.fit)
S2 <- create.mxMatrix(c("0.2*ErrVarMath",
0,1,
0,"0.2*CorMathVerbal",1),
type="Symm", byrow=TRUE, name="S2")
A2 <- create.mxMatrix(c(0, "0.2*Spatial2Math", "0.2*Verbal2Math",
0, 0, 0,
0, 0, 0),
type="Full", nrow=3, ncol=3,
byrow=TRUE, name="A2")
random3 = tssem2(random, Amatrix = A2, Smatrix = S2,
diag.constraints = TRUE)
mxEval(Ematrix, random3$mx.fit)
?tssem2
mxMatrix("Iden", ncol=1, nrow=1, name="One")
1-S[1,1]
tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = TRUE,
mx.algebras=list(R2=mxAlgebra(One-Smatrix[1,1], name="R2"),
One=mxMatrix("Iden", ncol=1, nrow=1, name="One")))
data(Becker92)
#### Fixed-effects model
## First stage analysis
## Replicate Becker's (1992) analysis using 4 studies only
fixed1 <- tssem1(Becker92$data[1:4], Becker92$n[1:4], method="FEM")
summary(fixed1)
## Prepare a regression model using create.mxMatrix()
A1 <- create.mxMatrix(c(0,0,0,"0.2*Spatial2Math",
0,0,"0.2*Verbal2Math",0,0), type="Full",
ncol=3, nrow=3, as.mxMatrix=FALSE)
## This step is not necessary but it is useful for inspecting the model.
dimnames(A1)[[1]] <- dimnames(A1)[[2]] <- c("Math","Spatial","Verbal")
## Display A1
A1
S1 <- create.mxMatrix(c("0.2*ErrorVarMath",0,0,1,"0.2*CorSpatialVerbal",1),
type="Symm", as.mxMatrix=FALSE)
## This step is not necessary but it is useful for inspecting the model.
dimnames(S1)[[1]] <- dimnames(S1)[[2]] <- c("Math","Spatial","Verbal")
## Display S1
S1
################################################################################
## Alternative model specification in lavaan model syntax
model <- "## Regression paths
Math~Spatial2Math*Spatial
Math~Verbal2Math*Verbal
Spatial~~CorSpatialVerbal*Verbal
## Fix the variances of Spatial and Verbal at 1
Spatial~~1*Spatial
Verbal~~1*Verbal
## Label the error variance of Math
Math~~ErrorVarMath*Math+start(0.2)*Math"
## Display the model
plot(model)
RAM <- lavaan2RAM(model, obs.variables=c("Math","Spatial","Verbal"))
RAM
A1 <- RAM$A
S1 <- RAM$S
################################################################################
## Fixed-effects model: Second stage analysis
## Two equivalent versions to calculate the R2 and its 95% LBCI
fixed2 <- tssem2(fixed1, Amatrix=A1, Smatrix=S1, intervals.type="LB",
mx.algebras=list(R1=mxAlgebra(Spatial2Math^2+Verbal2Math^2
+2*CorSpatialVerbal*Spatial2Math*Verbal2Math, name="R1"),
R2=mxAlgebra(One-Smatrix[1,1], name="R2"),
One=mxMatrix("Iden", ncol=1, nrow=1, name="One")))
summary(fixed2)
S
S
S1
plot(fixed2)
random2 = tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = TRUE,
mx.algebras=list(R2=mxAlgebra(One-Smatrix[3,3], name="R2"),
One=mxMatrix("Iden", ncol=1, nrow=1, name="One")))
tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = TRUE,
mx.algebras=list(indirect = mxAlgebra(Math2Spatial*Spacial2Verbal,
name = "indirect"),
total = mxAlgebra(Math2Verbal + Math2Spatial*Spacial2Verbal,
name = "total"))))
tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = TRUE,
mx.algebras=list(indirect = mxAlgebra(Math2Spatial*Spacial2Verbal,
name = "indirect"),
total = mxAlgebra(Math2Verbal + Math2Spatial*Spacial2Verbal,
name = "total")))
tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = TRUE,
mx.algebras=list(indirect = mxAlgebra(Math2Spatial*Spatial2Verbal,
name = "indirect"),
total = mxAlgebra(Math2Verbal + Math2Spatial*Spatial2Verbal,
name = "total")))
random2 = tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = TRUE,
mx.algebras=list(indirect = mxAlgebra(Math2Spatial*Spatial2Verbal,
name = "indirect"),
total = mxAlgebra(Math2Verbal + Math2Spatial*Spatial2Verbal,
name = "total")))
summary(random2)
random2 = tssem2(random, Amatrix = A, Smatrix = S,
diag.constraints = FALSE,
mx.algebras=list(indirect = mxAlgebra(Math2Spatial*Spatial2Verbal,
name = "indirect"),
total = mxAlgebra(Math2Verbal + Math2Spatial*Spatial2Verbal,
name = "total")),
intervals.type = "LB")
summary(random2)
semp = meta2semPlot(random2)
semPaths(semp)
Ematrix = diag(mxEval(Ematrix, random2$mx.fit))
random2$mx.fit
pattern.na(Hunter83$data, show.na=FALSE)
pattern.na(Hunter83$data, show.na=TRUE)
pattern.n(Hunter83$data, Hunter83$n)
is.pd(Hunter83$data)
tssem1(Hunter83$data, Hunter83$n, method = "REM",
RE.type = "Diag")
random = tssem1(Hunter83$data, Hunter83$n, method = "REM",
RE.type = "Diag")
summary(random)
rerun(random)
dimnames(Hunter83$data$`Campbell et al. (1973)`)
dimnames(Hunter83$data$`Campbell et al. (1973)`)[[1]]
vars = dimnames(Hunter83$data$`Campbell et al. (1973)`)[[1]]
i = matrix(rep(0, 5*5), nrow=5, ncol=5)
I
i
dimnames(i)[[1]] = dimnames(i)[[2]] = vars
dimnames(i)
dimnames(i)[[2]]
dimnames(i)[[1]]
i
vars
i = matrix(rep(0, 4*4), nrow=4, ncol=4)
dimnames(i)[[1]] = dimnames(i)[[2]] = vars
i
matrix(c(0, 0, 0, 0,
"0.2*Ability2Job_knowledge", 0, 0, 0,
"0.2*Ability2Work_sample", "0.2*Job_knowledge2Work_sample", 0, 0,
0, "0.2*Job_knowledge2Supervisor", "0.2*Work_sample2Supervisor", 0, 0),
ncol = 4, nrow=4, byrow = TRUE)
matrix(c(0, 0, 0, 0,
"0.2*Ability2Job_knowledge", 0, 0, 0,
"0.2*Ability2Work_sample", "0.2*Job_knowledge2Work_sample", 0, 0,
0, "0.2*Job_knowledge2Supervisor", "0.2*Work_sample2Supervisor", 0),
ncol = 4, nrow=4, byrow = TRUE)
matrix(c(0, 0, 0, 0,
"0.2*Ability2Job_knowledge", 0, 0, 0,
"0.2*Ability2Work_sample", "0.2*Job_knowledge2Work_sample", 0, 0,
0, "0.2*Job_knowledge2Supervisor", "0.2*Work_sample2Supervisor", 0),
ncol = 4, nrow=4)
matrix(c(0, 0, 0, 0,
"0.2*Ability2Job_knowledge", 0, 0, 0,
"0.2*Ability2Work_sample", "0.2*Job_knowledge2Work_sample", 0, 0,
0, "0.2*Job_knowledge2Supervisor", "0.2*Work_sample2Supervisor", 0),
ncol = 4, nrow=4, byrow=TRUE)
A = matrix(c(0, 0, 0, 0,
"0.2*Ability2Job_knowledge", 0, 0, 0,
"0.2*Ability2Work_sample", "0.2*Job_knowledge2Work_sample", 0, 0,
0, "0.2*Job_knowledge2Supervisor", "0.2*Work_sample2Supervisor", 0),
ncol = 4, nrow=4, byrow=TRUE)
dimnames(A)[[1]] = dimnames(A)[[2]] = vars
A
dimnames(A)[[1]] = dimnames(A)[[2]] = vars
A
A = as.mxMatrix(A)
i
Diag(1, "0.1*ErrVarJ", "0.1*ErrVarW", "0.1*ErrVarS")
Diag(c(1, "0.1*ErrVarJ", "0.1*ErrVarW", "0.1*ErrVarS"))
S = Diag(c(1, "0.1*ErrVarJ", "0.1*ErrVarW", "0.1*ErrVarS"))
vec2symMat(coef(random, "fixed"))
vec2symMat(coef(random, "fixed"), diag=FALSE)
betas = vec2symMat(coef(random, "fixed"), diag=FALSE)
dimnames(betas)[[1]] = dimnames(betas)[[2]] = vars
betas
summary(random)
options(scipen = 999)
summary(random)
S = Diag(c(1, "0.1*ErrVarJ", "0.1*ErrVarW", "0.1*ErrVarS"))
dimnames(S)[[1]] = dimnames(S)[[2]] = vars
S
S = as.mxMatrix(S)
S
A = matrix(c(0, 0, 0, 0,
"0.2*A2J", 0, 0, 0,
"0.2*A2W", "0.2*J2W", 0, 0,
0, "0.2*J2S", "0.2*W2S", 0),
ncol = 4, nrow=4, byrow=TRUE)
dimnames(A)[[1]] = dimnames(A)[[2]] = vars
A = as.mxMatrix(A)
mxAlgebra(indirect_effect = A2J*J2S+A2J*J2W*W2S+A2W*W2S, name = "indirect_effect")
indirect_effect = mxAlgebra(indirect_effect = A2J*J2S+A2J*J2W*W2S+A2W*W2S, name = "indirect_effect")
tssem2(random, Amatrix = A, Smatrix = S,
intervals.type = "LB", diag.constraints = TRUE,
mx.algebras = list(Ind=mxAlgebra(A2J*J2S+A2J*J2W*W2S+A2W*W2S,
name="Ind")))
random2 = tssem2(random, Amatrix = A, Smatrix = S,
intervals.type = "LB", diag.constraints = TRUE,
mx.algebras = list(Ind=mxAlgebra(A2J*J2S+A2J*J2W*W2S+A2W*W2S,
name="Ind")))
summary(random2)
cors = coef(random2, coef="fixed")
cors = vec2symMat(cors, diag=FALSE)
cors = coef(random2, coef="fixed")
cors
vec2symMat(cors, diag=FALSE)
vec2symMat(cors, diag=TRUE)
coef(random2)
cors = coef(random2)[1:4]
cors = vec2symMat(cors, diag=TRUE)
cors = coef(random2)[1:4]
cors
cors = coef(random2)[1:5]
vec2symMat(cors, diag=TRUE)
cors
sem.path = meta2semPlot(random2)
plot(random2)
plot(random2)
sem.path = meta2semPlot(random2)
semPaths(sem.path, whatLabels = "est", edge.color = "black", nodeLabels = labels)
semPaths(sem.path, whatLabels = "est", edge.color = "black")
?semPaths
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="spring")
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="circle")
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="circle2")
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2")
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=2)
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=3)
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=4)
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=1)
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=4)
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=0)
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2")
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=2)
labels = c("Ideal Life","Satisfied","Important","SWL\nScale")
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=2, labels = labels)
labels = c("Ideal Life","Satisfied","Important","SWL\nScale")
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=2, labels = labels)
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=2,
nodeLabels = labels)
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=2,
nodeLabels = labels)
labels = c("Resilience","Emotion Regulation","Coping","Depression")
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=2,
nodeLabels = labels)
labels = c("Resilience","Emotion\nRegulation","Coping","Depres-\nsion")
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=2,
nodeLabels = labels)
semPaths(sem.path, whatLabels = "est", what = "est", edge.color = "black", layout="tree2", rotation=2,
nodeLabels = labels)
semPaths(sem.path, whatLabels = "est", edge.color = "black", layout="tree2", rotation=2,
nodeLabels = labels)
x = res
dat <- dat.konstantopoulos2011
res <- rma.mv(yi, vi, random = ~ 1 | district/school, data=dat)
res
library(metafor)
dat <- dat.konstantopoulos2011
res <- rma.mv(yi, vi, random = ~ 1 | district/school, data=dat)
res
x = res
m = x
# Check class
if (!(class(m)[1] %in% c("rma.mv", "rma"))){
stop("x must be of class 'rma.mv'.")
}
# Check for three level model
if (m$sigma2s != 2){
stop("The model you provided does not seem to be a three-level model. This function can only be used for three-level models.")
}
# Get variance diagonal and calculate total variance
n = m$k.all
vector.inv.var = 1/(diag(m$V))
sum.inv.var = sum(vector.inv.var)
sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2", "Level 3")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
df
m = x
# Check class
if (!(class(m)[1] %in% c("rma.mv", "rma"))){
stop("x must be of class 'rma.mv'.")
}
# Check for three level model
if (m$sigma2s != 2){
stop("The model you provided does not seem to be a three-level model. This function can only be used for three-level models.")
}
# Get variance diagonal and calculate total variance
n = m$k.all
vector.inv.var = 1/(diag(m$V))
sum.inv.var = sum(vector.inv.var)
sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2", "Level 3")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
g = ggplot(df, aes(fill=Level, y=Variance, x=as.factor(Type))) +
coord_cartesian(ylim = c(0,1), clip = "off") +
geom_bar(stat="identity", position="fill", width = 1, color="black") +
scale_y_continuous(labels = scales::percent)+
theme(axis.title.x=element_blank(),
axis.text.y = element_text(color="black"),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_line(lineend = "round"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.background = element_rect(linetype="solid",
colour ="black"),
legend.title = element_blank(),
legend.key.size = unit(0.75,"cm"),
axis.ticks.length=unit(.25, "cm"),
plot.margin = unit(c(1,3,1,1), "lines")) +
scale_fill_manual(values = c("darkseagreen3", "deepskyblue3", "darkseagreen2",
"deepskyblue1", "deepskyblue2")) +
# Add Annotation
# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
print(df.res)
library(ggplot2)
m = x
# Check class
if (!(class(m)[1] %in% c("rma.mv", "rma"))){
stop("x must be of class 'rma.mv'.")
}
# Check for three level model
if (m$sigma2s != 2){
stop("The model you provided does not seem to be a three-level model. This function can only be used for three-level models.")
}
# Get variance diagonal and calculate total variance
n = m$k.all
vector.inv.var = 1/(diag(m$V))
sum.inv.var = sum(vector.inv.var)
sum.sq.inv.var = (sum.inv.var)^2
vector.inv.var.sq = 1/(diag(m$V)^2)
sum.inv.var.sq = sum(vector.inv.var.sq)
num = (n-1)*sum.inv.var
den = sum.sq.inv.var - sum.inv.var.sq
est.samp.var = num/den
# Calculate variance proportions
level1=((est.samp.var)/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level2=((m$sigma2[2])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
level3=((m$sigma2[1])/(m$sigma2[1]+m$sigma2[2]+est.samp.var)*100)
# Prepare df for return
Level=c("Level 1", "Level 2", "Level 3")
Variance=c(level1, level2, level3)
df.res=data.frame(Variance)
colnames(df.res) = c("% of total variance")
rownames(df.res) = Level
I2 = c("---", round(Variance[2:3], 2))
df.res = as.data.frame(cbind(df.res, I2))
totalI2 = Variance[2] + Variance[3]
# Generate plot
df1 = data.frame("Level" = c("Sampling Error", "Total Heterogeneity"),
"Variance" = c(df.res[1,1], df.res[2,1]+df.res[3,1]),
"Type" = rep(1,2))
df2 = data.frame("Level" = rownames(df.res),
"Variance" = df.res[,1],
"Type" = rep(2,3))
df = as.data.frame(rbind(df1, df2))
g = ggplot(df, aes(fill=Level, y=Variance, x=as.factor(Type))) +
coord_cartesian(ylim = c(0,1), clip = "off") +
geom_bar(stat="identity", position="fill", width = 1, color="black") +
scale_y_continuous(labels = scales::percent)+
theme(axis.title.x=element_blank(),
axis.text.y = element_text(color="black"),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_line(lineend = "round"),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.background = element_rect(linetype="solid",
colour ="black"),
legend.title = element_blank(),
legend.key.size = unit(0.75,"cm"),
axis.ticks.length=unit(.25, "cm"),
plot.margin = unit(c(1,3,1,1), "lines")) +
scale_fill_manual(values = c("darkseagreen3", "deepskyblue3", "darkseagreen2",
"deepskyblue1", "deepskyblue2")) +
# Add Annotation
# Total Variance
annotate("text", x = 1.5, y = 1.05,
label = paste("Total Variance:",
round(m$sigma2[1]+m$sigma2[2]+est.samp.var, 3))) +
# Sampling Error
annotate("text", x = 1, y = (df[1,2]/2+df[2,2])/100,
label = paste("Sampling Error Variance: \n", round(est.samp.var, 3)), size = 3) +
# Total I2
annotate("text", x = 1, y = ((df[2,2])/100)/2-0.02,
label = bquote("Total"~italic(I)^2*":"~.(round(df[2,2],2))*"%"), size = 3) +
annotate("text", x = 1, y = ((df[2,2])/100)/2+0.05,
label = paste("Variance not attributable \n to sampling error: \n", round(m$sigma2[1]+m$sigma2[2],3)), size = 3) +
# Level 1
annotate("text", x = 2, y = (df[1,2]/2+df[2,2])/100, label = paste("Level 1: \n",
round(df$Variance[3],2), "%", sep=""), size = 3) +
# Level 2
annotate("text", x = 2, y = (df[5,2]+(df[4,2]/2))/100,
label = bquote(italic(I)[Level2]^2*":"~.(round(df[4,2],2))*"%"), size = 3) +
# Level 3
annotate("text", x = 2, y = (df[5,2]/2)/100,
label = bquote(italic(I)[Level3]^2*":"~.(round(df[5,2],2))*"%"), size = 3)
print(df.res)
g
pkgdown::build_site()
