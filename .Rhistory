cat(paste(shQuote(out.study.random, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.random)
}
}
if (x$comb.fixed == TRUE & x$comb.random == TRUE){
if (length(out.study.fixed) < 1 & length(out.study.random) < 1){
cat("No outliers detected (fixed-effect/random-effects model).")
} else {
cat("Identified outliers (fixed-effect model)", "\n")
cat("----------------------------------------", "\n")
cat(paste(shQuote(out.study.fixed, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.fixed)
cat("\n")
cat("Identified outliers (random-effects model)", "\n")
cat("------------------------------------------", "\n")
cat(paste(shQuote(out.study.random, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.random)
}
}
}
if (!class(x)[1] %in% c("rma.uni", "rma",
"metagen", "metapropr",
"metacor", "metainc",
"metaprop", "metabin", "metabin")){
message("Input must be of class 'meta' or 'rma.uni'")
}
if (token == "metafor"){
invisible(list("out.study" = out.study,
"m" = m))
} else {
invisible(list("out.study.fixed" = out.study.fixed,
"out.study.random" = out.study.random,
"m.fixed" = m.fixed,
"m.random" = m.random))
}
}
find.outliers(m2)
find.outliers(m6)
fo6 = find.outliers(m6)
fo6$out.study.fixed
fo6$m.fixed
out.study = NULL
out.study
find.outliers = function(x){
if (class(x)[1] %in% c("rma.uni", "rma")){
token = "metafor"
# Generate lower/upper for all effects
lower = as.numeric(x$yi - 1.96*sqrt(x$vi))
upper = as.numeric(x$yi + 1.96*sqrt(x$vi))
# Select outliers
mask = upper < x$ci.lb | lower > x$ci.ub
dat = data.frame("yi" = x$yi[!mask],
"vi" = x$vi[!mask])
out.study = x$slab[mask]
# Update metafor model
method.tau = x$method
m = metafor::rma.uni(dat$yi, vi = dat$vi, method = method.tau)
if (length(out.study) < 1){
cat(paste0("No outliers detected (", method.tau,")."))
out.study = NULL
} else {
cat(paste0("Identified outliers (", method.tau,")"), "\n")
cat("-------------------------", "\n")
cat(paste(shQuote(out.study, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m)
}
}
if (class(x)[1] %in% c("metagen", "metapropr",
"metacor", "metainc",
"metaprop", "metabin", "metabin")){
token = "meta"
if (class(x)[1] == "metaprop"){
lower = x$TE - 1.96*x$seTE
upper = x$TE + 1.96*x$seTE
# Generate mask with outliers (fixed/random)
mask.fixed = upper < x$lower.fixed | lower > x$upper.fixed
mask.random = upper < x$lower.random | lower > x$upper.random
} else {
# Generate mask with outliers (fixed/random)
mask.fixed = x$upper < x$lower.fixed | x$lower > x$upper.fixed
mask.random = x$upper < x$lower.random | x$lower > x$upper.random
}
# Update meta-analysis with outliers removed
m.fixed = update.meta(x, exclude = mask.fixed)
m.random = update.meta(x, exclude = mask.random)
# Select names of outlying studies
out.study.fixed = x$studlab[mask.fixed]
out.study.random = x$studlab[mask.random]
if (x$comb.fixed == TRUE & x$comb.random == FALSE){
if (length(out.study.fixed) < 1){
cat("No outliers detected (fixed-effect model).")
out.study.fixed = NULL
} else {
cat("Identified outliers (fixed-effect model)", "\n")
cat("----------------------------------------", "\n")
cat(paste(shQuote(out.study.fixed, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.fixed)
}
}
if (x$comb.fixed == FALSE & x$comb.random == TRUE){
if (length(out.study.random) < 1){
cat("No outliers detected (random-effects model).")
out.study.random = NULL
} else {
cat("Identified outliers (random-effects model)", "\n")
cat("------------------------------------------", "\n")
cat(paste(shQuote(out.study.random, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.random)
}
}
if (x$comb.fixed == TRUE & x$comb.random == TRUE){
if (length(out.study.fixed) < 1 & length(out.study.random) < 1){
cat("No outliers detected (fixed-effect/random-effects model).")
out.study.fixed = NULL
out.study.ranomd = NULL
} else {
cat("Identified outliers (fixed-effect model)", "\n")
cat("----------------------------------------", "\n")
cat(paste(shQuote(out.study.fixed, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.fixed)
cat("\n")
cat("Identified outliers (random-effects model)", "\n")
cat("------------------------------------------", "\n")
cat(paste(shQuote(out.study.random, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.random)
}
}
}
if (!class(x)[1] %in% c("rma.uni", "rma",
"metagen", "metapropr",
"metacor", "metainc",
"metaprop", "metabin", "metabin")){
message("Input must be of class 'meta' or 'rma.uni'")
}
if (token == "metafor"){
invisible(list("out.study" = out.study,
"m" = m))
} else {
invisible(list("out.study.fixed" = out.study.fixed,
"out.study.random" = out.study.random,
"m.fixed" = m.fixed,
"m.random" = m.random))
}
}
find.outliers(m6)
fo6 = find.outliers(m6)
fo6$out.study.fixed
fo6$out.study.random
find.outliers = function(x){
if (class(x)[1] %in% c("rma.uni", "rma")){
token = "metafor"
# Generate lower/upper for all effects
lower = as.numeric(x$yi - 1.96*sqrt(x$vi))
upper = as.numeric(x$yi + 1.96*sqrt(x$vi))
# Select outliers
mask = upper < x$ci.lb | lower > x$ci.ub
dat = data.frame("yi" = x$yi[!mask],
"vi" = x$vi[!mask])
out.study = x$slab[mask]
# Update metafor model
method.tau = x$method
m = metafor::rma.uni(dat$yi, vi = dat$vi, method = method.tau)
if (length(out.study) < 1){
cat(paste0("No outliers detected (", method.tau,")."))
out.study = NULL
} else {
cat(paste0("Identified outliers (", method.tau,")"), "\n")
cat("-------------------------", "\n")
cat(paste(shQuote(out.study, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m)
}
}
if (class(x)[1] %in% c("metagen", "metapropr",
"metacor", "metainc",
"metaprop", "metabin", "metabin")){
token = "meta"
if (class(x)[1] == "metaprop"){
lower = x$TE - 1.96*x$seTE
upper = x$TE + 1.96*x$seTE
# Generate mask with outliers (fixed/random)
mask.fixed = upper < x$lower.fixed | lower > x$upper.fixed
mask.random = upper < x$lower.random | lower > x$upper.random
} else {
# Generate mask with outliers (fixed/random)
mask.fixed = x$upper < x$lower.fixed | x$lower > x$upper.fixed
mask.random = x$upper < x$lower.random | x$lower > x$upper.random
}
# Update meta-analysis with outliers removed
m.fixed = update.meta(x, exclude = mask.fixed)
m.random = update.meta(x, exclude = mask.random)
# Select names of outlying studies
out.study.fixed = x$studlab[mask.fixed]
out.study.random = x$studlab[mask.random]
if (x$comb.fixed == TRUE & x$comb.random == FALSE){
if (length(out.study.fixed) < 1){
cat("No outliers detected (fixed-effect model).")
out.study.fixed = NULL
} else {
cat("Identified outliers (fixed-effect model)", "\n")
cat("----------------------------------------", "\n")
cat(paste(shQuote(out.study.fixed, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.fixed)
}
}
if (x$comb.fixed == FALSE & x$comb.random == TRUE){
if (length(out.study.random) < 1){
cat("No outliers detected (random-effects model).")
out.study.random = NULL
} else {
cat("Identified outliers (random-effects model)", "\n")
cat("------------------------------------------", "\n")
cat(paste(shQuote(out.study.random, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.random)
}
}
if (x$comb.fixed == TRUE & x$comb.random == TRUE){
if (length(out.study.fixed) < 1 & length(out.study.random) < 1){
cat("No outliers detected (fixed-effect/random-effects model).")
out.study.fixed = NULL
out.study.random = NULL
} else {
cat("Identified outliers (fixed-effect model)", "\n")
cat("----------------------------------------", "\n")
cat(paste(shQuote(out.study.fixed, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.fixed)
cat("\n")
cat("Identified outliers (random-effects model)", "\n")
cat("------------------------------------------", "\n")
cat(paste(shQuote(out.study.random, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.random)
}
}
}
if (!class(x)[1] %in% c("rma.uni", "rma",
"metagen", "metapropr",
"metacor", "metainc",
"metaprop", "metabin", "metabin")){
message("Input must be of class 'meta' or 'rma.uni'")
}
if (token == "metafor"){
invisible(list("out.study" = out.study,
"m" = m))
} else {
invisible(list("out.study.fixed" = out.study.fixed,
"out.study.random" = out.study.random,
"m.fixed" = m.fixed,
"m.random" = m.random))
}
}
find.outliers(m6)
fo6 = find.outliers(m6)
fo6$out.study.random
fo6$out.study.fixed
m1 <- metagen(TE, seTE, data = ThirdWave, studlab = ThirdWave$Author, comb.random = FALSE)
find.outliers(m1)
fo1 = find.outliers(m1)
fo1$out.study.random
fo1$out.study.fixed
find.outliers(m1)
find.outliers(m2)
m1 <- metagen(TE, seTE, data = ThirdWave, studlab = ThirdWave$Author, comb.fixed = FALSE)
find.outliers(m1)
m2 <- rma(yi = TE, sei = seTE, data = ThirdWave[1:4,],
slab = ThirdWave$Author, method = "PM")
m2 <- rma(yi = TE, sei = seTE, data = ThirdWave[1:4,],
slab = ThirdWave$Author[1:4], method = "PM")
find.outliers(m2)
# Pool with metafor
m2 <- rma(yi = TE, sei = seTE, data = ThirdWave,
slab = ThirdWave$Author, method = "PM")
find.outliers(m2)
fo2$m
knitr::opts_chunk$set(echo = TRUE)
data("ThirdWave")
data("MVRegressionData")
data("NetDataNetmeta")
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
comb.fixed = FALSE,
method.tau = "PM")
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
comb.fixed = FALSE,
method.tau = "PM")
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
comb.fixed = FALSE,
method.tau = "PM")
find.outliers(meta)
find.outliers(meta)
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
comb.fixed = FALSE,
method.tau = "PM")
find.outliers = function(x){
if (class(x)[1] %in% c("rma.uni", "rma")){
token = "metafor"
# Generate lower/upper for all effects
lower = as.numeric(x$yi - 1.96*sqrt(x$vi))
upper = as.numeric(x$yi + 1.96*sqrt(x$vi))
# Select outliers
mask = upper < x$ci.lb | lower > x$ci.ub
dat = data.frame("yi" = x$yi[!mask],
"vi" = x$vi[!mask])
out.study = x$slab[mask]
# Update metafor model
method.tau = x$method
m = metafor::rma.uni(dat$yi, vi = dat$vi, method = method.tau)
if (length(out.study) < 1){
cat(paste0("No outliers detected (", method.tau,")."))
out.study = NULL
} else {
cat(paste0("Identified outliers (", method.tau,")"), "\n")
cat("-------------------------", "\n")
cat(paste(shQuote(out.study, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m)
}
}
if (class(x)[1] %in% c("metagen", "metapropr",
"metacor", "metainc",
"metaprop", "metabin", "metabin")){
token = "meta"
if (class(x)[1] == "metaprop"){
lower = x$TE - 1.96*x$seTE
upper = x$TE + 1.96*x$seTE
# Generate mask with outliers (fixed/random)
mask.fixed = upper < x$lower.fixed | lower > x$upper.fixed
mask.random = upper < x$lower.random | lower > x$upper.random
} else {
# Generate mask with outliers (fixed/random)
mask.fixed = x$upper < x$lower.fixed | x$lower > x$upper.fixed
mask.random = x$upper < x$lower.random | x$lower > x$upper.random
}
# Update meta-analysis with outliers removed
m.fixed = update.meta(x, exclude = mask.fixed)
m.random = update.meta(x, exclude = mask.random)
# Select names of outlying studies
out.study.fixed = x$studlab[mask.fixed]
out.study.random = x$studlab[mask.random]
if (x$comb.fixed == TRUE & x$comb.random == FALSE){
if (length(out.study.fixed) < 1){
cat("No outliers detected (fixed-effect model).")
out.study.fixed = NULL
} else {
cat("Identified outliers (fixed-effect model)", "\n")
cat("----------------------------------------", "\n")
cat(paste(shQuote(out.study.fixed, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.fixed)
}
}
if (x$comb.fixed == FALSE & x$comb.random == TRUE){
if (length(out.study.random) < 1){
cat("No outliers detected (random-effects model).")
out.study.random = NULL
} else {
cat("Identified outliers (random-effects model)", "\n")
cat("------------------------------------------", "\n")
cat(paste(shQuote(out.study.random, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.random)
}
}
if (x$comb.fixed == TRUE & x$comb.random == TRUE){
if (length(out.study.fixed) < 1 & length(out.study.random) < 1){
cat("No outliers detected (fixed-effect/random-effects model).")
out.study.fixed = NULL
out.study.random = NULL
} else {
cat("Identified outliers (fixed-effect model)", "\n")
cat("----------------------------------------", "\n")
cat(paste(shQuote(out.study.fixed, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.fixed)
cat("\n")
cat("Identified outliers (random-effects model)", "\n")
cat("------------------------------------------", "\n")
cat(paste(shQuote(out.study.random, type="cmd"), collapse=", "), "\n", "\n")
cat("Results with outliers removed", "\n")
cat("-----------------------------", "\n")
print(m.random)
}
}
}
if (!class(x)[1] %in% c("rma.uni", "rma",
"metagen", "metapropr",
"metacor", "metainc",
"metaprop", "metabin", "metabin")){
message("Input must be of class 'meta' or 'rma.uni'")
}
if (token == "metafor"){
invisible(list("out.study" = out.study,
"m" = m))
} else {
invisible(list("out.study.fixed" = out.study.fixed,
"out.study.random" = out.study.random,
"m.fixed" = m.fixed,
"m.random" = m.random))
}
}
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
comb.fixed = FALSE,
method.tau = "PM")
find.outliers(meta)
m1 <- metagen(TE, seTE, data = ThirdWave,
studlab = ThirdWave$Author, comb.fixed = FALSE)
find.outliers(m1)
m2 <- rma(yi = TE, sei = seTE, data = ThirdWave,
slab = ThirdWave$Author, method = "PM")
find.outliers(m2)
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
comb.fixed = FALSE)
find.outliers(meta)
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
method.tau = "DL",
comb.fixed = FALSE)
find.outliers(meta)
meta <- metagen(TE, seTE,
data = ThirdWave,
studlab = ThirdWave$Author,
method.tau = "SJ",
comb.fixed = FALSE)
find.outliers(meta)
pkgdown::build_articles()
devtools::document()
?spot.outliers.random
devtools::document()
?find.outliers
pkgdown::build_site()
devtools::install()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
library(dmetar)
devtools::build_manual()
devtools::check()
devtools
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::check()
m
m1
meta = metagen(TE, seTE, studlab = paste(ThirdWave$Author), data=ThirdWave, method.tau = "PM")
devtools::document()
devtools::install()
meta
devtools::document()
InfluenceAnalysis(meta)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
m1 <- metagen(TE, seTE, data = ThirdWave,
studlab = ThirdWave$Author, comb.fixed = FALSE)
library(meta)
m1 <- metagen(TE, seTE, data = ThirdWave,
studlab = ThirdWave$Author, comb.fixed = FALSE)
library(dmetar)
m1 <- metagen(TE, seTE, data = ThirdWave,
studlab = ThirdWave$Author, comb.fixed = FALSE)
find.outliers(m1)
x = m1
x$upper < x$lower.fixed | x$lower > x$upper.fixed
x$upper < x$lower.random | x$lower > x$upper.random
x$lower
m1
library(lme4)
(fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
summary(fm1)
sleepstudy
